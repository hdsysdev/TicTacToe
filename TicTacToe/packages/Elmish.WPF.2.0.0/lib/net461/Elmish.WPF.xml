<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Elmish.WPF</name></assembly>
<members>
<member name="M:Elmish.WPF.Binding.subModelSelectedItem``3(System.String,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2}},System.String)">
 <summary>
   Creates a two-way binding to a SelectedItem-like property where the
   ItemsSource-like property is a subBindingSeq or subModelSeq. Automatically
   converts the dynamically created Elmish.WPF view models to/from their
   corresponding IDs, so the Elmish user code only has to work with the IDs.
   
   Only use this if you are unable to use some kind of SelectedValue or
   SelectedIndex property with a normal twoWay binding. This binding is
   less type-safe and will throw at runtime if itemsSourceBindingName does
   not correspond to a subBindingSeq or subModelSeq binding, or if the
   inferred 'id type does not match the actual ID type used in that binding.
 </summary>
 <param name="itemsSourceBindingName">
   The name of the ItemsSource-like binding, which must be created using
   subBindingSeq or subModelSeq.
 </param>
 <param name="get">Gets the selected sub-model/sub-binding ID from the model.</param>
 <param name="set">
   Returns the message to dispatch on selections/deselections.
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.subBindingSeq``6(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``3,``4},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{System.Tuple{``1,``3},``5}}},System.String)">
 <summary>
   Creates a binding to a sequence of sub-items (but not sub-components),
   each uniquely identified by the value returned by the getId function
   (as determined by the default equality comparer). You typically bind
   this to the ItemsSource of an ItemsControl, ListView, TreeView, etc.
   Analogous to a real Elm architecture, the child bindings have access to
   the main model state along with the sub-item, and dispatch the top-level
   message type. The model in the sub-bindings is a tuple with the main model
   as the first element and the child item as the second element.
 </summary>
 <param name="getMainModel">
   Gets the main model from the current model. This is typically 'id' when
   called from top-level bindings, or 'fst' when called from sub-bindings
   at any level.
 </param>
 <param name="getSubItems">Gets the sub-items from the current model.</param>
 <param name="getId">Gets a unique identifier for a sub-item.</param>
 <param name="bindings">
   A function that returns the bindings for the sub-item.
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.subModelSeq``6(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``2,``4}}},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``3,``4},``5},System.String)">
 <summary>
   Creates a binding to a sequence of sub-models/components, each uniquely
   identified by the value returned by the getId function (as determined
   by the default equality comparer). You typically bind this to the
   ItemsSource of an ItemsControl, ListView, TreeView, etc.
 </summary>
 <param name="getModels">Gets the sub-models from the model.</param>
 <param name="getId">Gets a unique identifier for a sub-model.</param>
 <param name="bindings">
   A function that returns the bindings for the sub-model.
 </param>
 <param name="toMsg">
   A function to convert sub-model messages to parent model messages
   (e.g. a parent message union case that wraps the child message type).
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.subModelOpt``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``1,``2}}},Microsoft.FSharp.Core.FSharpFunc{``2,``3},System.String)">
 <summary>
   Creates a binding to a sub-model/component that has its own bindings and
   may not exist. If it does not exist, bindings to this model will return null.
   You typically bind this to the DataContext of a UserControl or similar.
 </summary>
 <param name="getModel">Gets the sub-model from the model.</param>
 <param name="bindings">
   A function that returns the bindings for the sub-model.
 </param>
 <param name="toMsg">
   A function to convert sub-model messages to parent model messages
   (e.g. a parent message union case that wraps the child message type).
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.subModel``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``1,``2}}},Microsoft.FSharp.Core.FSharpFunc{``2,``3},System.String)">
 <summary>
   Creates a binding to a sub-model/component that has its own bindings.
   You typically bind this to the DataContext of a UserControl or similar.
 </summary>
 <param name="getModel">Gets the sub-model from the model.</param>
 <param name="bindings">
   A function that returns the bindings for the sub-model.
 </param>
 <param name="toMsg">
   A function to convert sub-model messages to parent model messages
   (e.g. a parent message union case that wraps the child message type).
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.paramCmdIf``2(Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}},System.Boolean,System.String)">
 <summary>
   Creates a conditional command binding that depends on the CommandParameter.
   If uiTrigger is false, CanExecuteChanged will only trigger for every model update.
   If uiTrigger is true, CanExecuteChanged will additionally trigger every time
   WPF's CommandManager detects UI changes that could potentially influence
   the command's ability to execute. This will likely lead to many more
   triggers than necessary, but is needed if you have bound the CommandParameter
   to another UI property.
 </summary>
 <param name="exec">Returns the message to dispatch.</param>
 <param name="canExec">Indicates if the command can execute.</param>
 <param name="uiTrigger">
   If true, use CommandManager to trigger CanExecuteChanged automatically
   for relevant UI changes.
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.paramCmd``2(Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.String)">
 <summary>
   Creates a command binding that depends on the CommandParameter.
 </summary>
 <param name="exec">Returns the message to dispatch.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.cmdIfValid``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpResult{``1,``2}},System.String)">
 <summary>
   Creates a conditional command binding that depends only on the model
   and uses a validation function to determine if it can execute. This allows
   easily re-using the same validation functions for inputs and commands,
   and can also increase type safety by having a single function determine
   both the message and whether it can execute (e.g. by pattern matching against
   a possibly missing value in the model that is needed in the message).
   CanExecuteChanged will only trigger if the validation result changes.
 </summary>
 <param name="exec">
   Returns the message to dispatch if Ok, or an error that will be ignored
   but will cause the command's CanExecute to return false.
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.cmdIf``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.String)">
 <summary>
   Creates a conditional command binding that depends only on the model.
   CanExecuteChanged will only trigger if the output of canExec changes.
 </summary>
 <param name="exec">Returns the message to dispatch.</param>
 <param name="canExec">Indicates if the command can execute.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.cmd``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.String)">
 <summary>Creates a command binding that depends only on the model.</summary>
 <param name="exec">Returns the message to dispatch.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.twoWayIfValid``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpResult{``2,System.String}}},System.String)">
 <summary>
   Creates a two-way binding that uses a validating setter to set validation
   status for the binding target using INotifyDataErrorInfo. Messages are only
   dispatced for valid input (the model will never know about invalid values).
 </summary>
 <param name="get">Gets the value from the model.</param>
 <param name="set">
   Returns the message to dispatch or an error message to display.
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.twoWayValidate``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``2}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpResult{``3,System.String}},System.String)">
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.twoWayOpt``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2}},System.String)">
 <summary>
   Creates a two-way binding to an optional value. The getter/setter
   automatically converts between Option on the source side and a raw
   (possibly null) value on the view side.
 </summary>
 <param name="get">Gets the value from the model.</param>
 <param name="set">Returns the message to dispatch.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.twoWay``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``2}},System.String)">
 <summary>Creates a two-way binding.</summary>
 <param name="get">Gets the value from the model.</param>
 <param name="set">Returns the message to dispatch.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.oneWaySeqLazy``6(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{``1,``2},Microsoft.FSharp.Core.FSharpFunc{``3,``4},Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``3,System.Boolean}},System.String)">
 <summary>
   Creates a one-way binding to a sequence of items. The binding will only
   be updated if the output of <paramref name="get" /> changes as determined
   by <paramref name="equals" />. Each item is uniquely identified by the
   value returned by <paramref name="getId"/>. The binding is backed by a
   persistent ObservableCollection, so only changed items (as determined by
   <paramref name="itemEquals"/>) will be replaced. If the items are complex
   and you want them updated instead of replaced, consider using subModelSeq.
 </summary>
 <param name="get">Gets the items from the model.</param>
 <param name="equals">
   A function that returns true if the output of the get function and the
   current value are equal.
   For standard equality comparison (e.g. for primitives or structural equality of records),
   you can use the default equality operator (=).
 </param>
 <param name="map">Transforms the value into the final type.</param>
 <param name="getId">Gets a unique identifier for an item.</param>
 <param name="itemEquals">
   A function that returns true if two items are equal. For standard equality
   comparison (e.g. for primitives or structural equality of records),
   you can use the default equality operator (=).
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.oneWaySeq``6(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``2,System.Boolean}},System.String)">
 <summary>
   Creates a one-way binding to a sequence of items, each uniquely identified
   by the value returned by <paramref name="getId"/>. The binding
   is backed by a persistent ObservableCollection, so only changed items
   (as determined by <paramref name="equals"/>) will be replaced. If the
   items are complex and you want them updated instead of replaced, consider
   using subModelSeq.
 </summary>
 <param name="get">Gets the items from the model.</param>
 <param name="getId">Gets a unique identifier for an item.</param>
 <param name="itemEquals">
   A function that returns true if two items are equal. For standard equality
   comparison (e.g. for primitives or structural equality of records),
   you can use the default equality operator (=).
 </param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.oneWayLazy``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Core.FSharpFunc{``1,``2},System.String)">
 <summary>
   Creates a lazily evaluated one-way binding. The map function will be
   called only when the output of <paramref name="get" /> changes, as
   determined by the <paramref name="equals" />. This may have better
   performance than oneWay for expensive computations (but may be less
   performant for non-expensive functions due to additional overhead).
 </summary>
 <param name="get">Gets the value from the model.</param>
 <param name="equals">
   A function that returns true if the output of the get function and the
   current value are equal.
   For standard equality comparison (e.g. for primitives or structural equality of records),
   you can use the default equality operator (=).
 </param>
 <param name="map">Transforms the value into the final type.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.oneWayOpt``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.String)">
 <summary>
   Creates a one-way binding to an optional value. The getter automatically
   converts between Option on the source side and a raw (possibly null)
   value on the view side.
 </summary>
 <param name="get">Gets the value from the model.</param>
 <param name="set">Returns the message to dispatch.</param>
 <param name="name">The binding name.</param>
</member>
<member name="M:Elmish.WPF.Binding.oneWay``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.String)">
 <summary>Creates a one-way binding.</summary>
 <param name="get">Gets the value from the model.</param>
 <param name="name">The binding name.</param>
</member>
<member name="T:Elmish.WPF.Internal.Command">
<summary>
 A command that optionally hooks into CommandManager.RequerySuggested to
 automatically trigger CanExecuteChanged whenever the CommandManager detects
 conditions that might change the output of canExecute. It&apos;s necessary to use
 this feature for command bindings where the CommandParameter is bound to
 another UI control (e.g. a ListView.SelectedItem).
</summary>
</member>
<member name="T:Elmish.WPF.Internal.BindingSpec`2">
<summary>
 Represents all necessary data used to create a binding.
</summary>
</member>
<member name="T:Elmish.WPF.Internal.BindingSpecData`2">
<summary>
 Represents all necessary data used to create the different binding types.
</summary>
</member>
<member name="F:Elmish.WPF.Internal.ViewModel`2.errors">
<summary>
 Error messages keyed by property name.
</summary>
</member>
<member name="T:Elmish.WPF.Internal.Binding`2">
<summary>
 Represents all necessary data used in an active binding.
</summary>
</member>
<member name="M:Elmish.WPF.Internal.Patterns.|Kvp|``2(System.Collections.Generic.KeyValuePair{``0,``1})">
<summary>
 Deconstructs a KeyValuePair into a tuple.
</summary>
</member>
<member name="M:Elmish.WPF.Utilities.ViewModel.designInstance``2(``0,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``0,``1}})">
<summary>
 Creates a design-time view model using the given model and bindings.
</summary>
</member>
<member name="M:Elmish.WPF.Utilities.ViewModel.startLoop``3(Elmish.WPF.ElmConfig,System.Windows.FrameworkElement,Microsoft.FSharp.Core.FSharpFunc{Elmish.Program{``0,``1,``2,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``1,``2}}},Microsoft.FSharp.Core.Unit},Elmish.Program{``0,``1,``2,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``1,``2}}})">
<summary>
 Start Elmish dispatch loop
</summary>
</member>
<member name="M:Elmish.WPF.Program.runWindowWithConfig``2(Elmish.WPF.ElmConfig,System.Windows.Window,Elmish.Program{Microsoft.FSharp.Core.Unit,``0,``1,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``0,``1}}})">
<summary>
 Starts both Elmish and WPF dispatch loops with the specified configuration.
 Blocking function.
</summary>
</member>
<member name="M:Elmish.WPF.Program.runWindow``2(System.Windows.Window,Elmish.Program{Microsoft.FSharp.Core.Unit,``0,``1,Microsoft.FSharp.Collections.FSharpList{Elmish.WPF.Internal.BindingSpec{``0,``1}}})">
<summary>
 Starts both Elmish and WPF dispatch loops. Blocking function.
</summary>
</member>
<member name="M:Elmish.WPF.Program.startApp(System.Windows.Window)">
<summary>
 Start WPF dispatch loop. Blocking function.
</summary>
</member>
</members>
</doc>
